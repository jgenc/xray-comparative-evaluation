# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 10  # number of classes
scale: l
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]  # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024]  # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768]   # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512]   # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512]   # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  # NextViT Small stem_chs = [64, 32, 64]
  #               depths = [3, 4, 10, 3]
  #               path_dropout = 0.1
  - [-1, 1, ConvBNReLU, [3, 64, 3, 2]]  # 0 - Stem
  - [-1, 1, ConvBNReLU, [64, 32, 3, 1]] # 1 - Stem
  - [-1, 1, ConvBNReLU, [32, 64, 3, 1]] # 2 - Stem
  - [-1, 1, ConvBNReLU, [64, 64, 3, 2]] # 3 - Stem

  - [-1, 1, NCB, [64, 96, 1, 0.0, 0, 32]] # 4 - Stage 1 NCB[0]
  - [-1, 1, NCB, [96, 96, 1, 0.005263158120214939, 0, 32]] # 5 - Stage 1 NCB[1]
  - [-1, 1, NCB, [96, 96, 1, 0.010526316240429878, 0, 32]] # 6 - Stage 1 NCB[2]

  - [-1, 1, NCB, [96, 192, 2, 0.015789475291967392, 0, 32]] # 7 - Stage 2 NCB[0]
  - [-1, 1, NCB, [192, 192, 1, 0.021052632480859756, 0, 32]] # 8 - Stage 2 NCB[1]
  - [-1, 1, NCB, [192, 192, 1, 0.02631578966975212, 0, 32]] # 9 - Stage 2 NCB[2]
  - [-1, 1, NTB, [192, 256, 0.031578950583934784, 1, 4, 2, 32, 0.75, 0, 0]] # 10 - Stage 2 NTB[0]

  - [-1, 1, NCB, [256, 384, 2, 0.03684210777282715, 0, 32]] # 11 - Stage 3 NCB[0] - Stride 2
  - [-1, 1, NCB, [384, 384, 1, 0.04210526496171951, 0, 32]] # 12 - Stage 3 NCB[1]
  - [-1, 1, NCB, [384, 384, 1, 0.04736842215061188, 0, 32]] # 13 - Stage 3 NCB[2]
  - [-1, 1, NCB, [384, 384, 1, 0.05263157933950424, 0, 32]] # 14 - Stage 3 NCB[3]
  - [-1, 1, NTB, [384, 512, 0.057894736528396606, 1, 2, 2, 32, 0.75, 0, 0]] # 15 - Stage 3 NTB[0]
  - [-1, 1, NCB, [512, 384, 1, 0.06315789371728897, 0, 32]] # 16 - Stage 3 NCB[0]
  - [-1, 1, NCB, [384, 384, 1, 0.06842105090618134, 0, 32]] # 17 - Stage 3 NCB[1]
  - [-1, 1, NCB, [384, 384, 1, 0.0736842080950737, 0, 32]] # 18 - Stage 3 NCB[2]
  - [-1, 1, NCB, [384, 384, 1, 0.07894736528396606, 0, 32]] # 19 - Stage 3 NCB[3]
  - [-1, 1, NTB, [384, 512, 0.08421052992343903, 1, 2, 2, 32, 0.75, 0, 0]] # 20 - Stage 3 NTB[0]

  - [-1, 1, NCB, [512, 768, 2, 0.08947368711233139, 0, 32]] # 21 - Stage 4 NCB[1]
  - [-1, 1, NCB, [768, 768, 1, 0.09473684430122375, 0, 32]] # 22 - Stage 4 NCB[2]
  - [-1, 1, NTB, [768, 1024, 0.10000000149011612, 1, 1, 2, 32, 0.75, 0, 0]] # 23 - Stage 4 NTB[0]

  # From now on it's a classification head, we don't want that
  # If you want to apply them check if theya re imported at `ultralytics/nn/modules/__init__.py` `..tasks.py`
  # - [-1, 1, nn.BatchNorm2d, [1024, 0.00001]] # 21
  # - [-1, 1, nn.AdaptiveAvgPool2d, ["(1, 1)"]] # 22
  # - [-1, 1, nn.Linear, [1024, 10]] # 23

  - [-1, 1, SPPF, [1024, 5]] # 24

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 25 
  - [[-1, 17], 1, Concat, [1]]  # cat backbone P4 # 26
  - [-1, 3, C2f, [512]]  # 27

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 28
  - [[-1, 7], 1, Concat, [1]]  # cat backbone P3  # 29
  - [-1, 3, C2f, [256]]  # (P3/8-small)  # 30

  - [-1, 1, Conv, [256, 3, 2]]  # 31
  - [[-1, 27], 1, Concat, [1]]  # cat head P4  # 32
  - [-1, 3, C2f, [512]]  # 18 (P4/16-medium) # 33

  - [-1, 1, Conv, [512, 3, 2]]  # 34
  - [[-1, 24], 1, Concat, [1]]  # cat head P5  # 35
  - [-1, 3, C2f, [1024]]  # 21 (P5/32-large) # 36

  - [[30, 33, 36], 1, Detect, [nc]]  # Detect(P3, P4, P5) # 37
